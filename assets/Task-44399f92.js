import{f as m}from"./normalizeUtils-758f8b63.js";import{t as y,G as _,f as d}from"./typedArrayUtil-bd69bba0.js";import{o as g}from"./zscale-3fafe111.js";import{p as P,r as C}from"./featureConversionUtils-e981d065.js";import{f as G}from"./query-b278558e.js";import"./FeatureSet-cf76d07f.js";import{x as v}from"./Query-ca5b0d4c.js";import{e as u,y as l,n as M,m as R}from"./cast-4943406f.js";import{j as T}from"./request-9ab300ca.js";import"./ensureType-9613b5f0.js";function x(o,t){return t}function c(o,t,e,r){switch(e){case 0:return h(o,t+r,0);case 1:return o.originPosition==="lowerLeft"?h(o,t+r,1):k(o,t+r,1)}}function f(o,t,e,r){return e===2?h(o,t,2):c(o,t,e,r)}function A(o,t,e,r){return e===2?h(o,t,3):c(o,t,e,r)}function b(o,t,e,r){return e===3?h(o,t,3):f(o,t,e,r)}function h({translate:o,scale:t},e,r){return o[r]+e*t[r]}function k({translate:o,scale:t},e,r){return o[r]-e*t[r]}class B{constructor(t){this._options=t,this.geometryTypes=["esriGeometryPoint","esriGeometryMultipoint","esriGeometryPolyline","esriGeometryPolygon"],this._previousCoordinate=[0,0],this._transform=null,this._applyTransform=x,this._lengths=[],this._currentLengthIndex=0,this._toAddInCurrentPath=0,this._vertexDimension=0,this._coordinateBuffer=null,this._coordinateBufferPtr=0,this._attributesConstructor=class{}}createFeatureResult(){return{fields:[],features:[]}}finishFeatureResult(t){if(this._options.applyTransform&&(t.transform=null),this._attributesConstructor=class{},this._coordinateBuffer=null,this._lengths.length=0,!t.hasZ)return;const e=g(t.geometryType,this._options.sourceSpatialReference,t.spatialReference);if(!y(e))for(const r of t.features)e(r.geometry)}createSpatialReference(){return{}}addField(t,e){const r=t.fields;_(r),r.push(e);const s=r.map(i=>i.name);this._attributesConstructor=function(){for(const i of s)this[i]=null}}addFeature(t,e){t.features.push(e)}prepareFeatures(t){switch(this._transform=t.transform,this._options.applyTransform&&t.transform&&(this._applyTransform=this._deriveApplyTransform(t)),this._vertexDimension=2,t.hasZ&&this._vertexDimension++,t.hasM&&this._vertexDimension++,t.geometryType){case"esriGeometryPoint":this.addCoordinate=(e,r,s)=>this.addCoordinatePoint(e,r,s),this.createGeometry=e=>this.createPointGeometry(e);break;case"esriGeometryPolygon":this.addCoordinate=(e,r,s)=>this._addCoordinatePolygon(e,r,s),this.createGeometry=e=>this._createPolygonGeometry(e);break;case"esriGeometryPolyline":this.addCoordinate=(e,r,s)=>this._addCoordinatePolyline(e,r,s),this.createGeometry=e=>this._createPolylineGeometry(e);break;case"esriGeometryMultipoint":this.addCoordinate=(e,r,s)=>this._addCoordinateMultipoint(e,r,s),this.createGeometry=e=>this._createMultipointGeometry(e)}}createFeature(){return this._lengths.length=0,this._currentLengthIndex=0,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0,this._coordinateBuffer=null,this._coordinateBufferPtr=0,{attributes:new this._attributesConstructor}}allocateCoordinates(){}addLength(t,e,r){this._lengths.length===0&&(this._toAddInCurrentPath=e),this._lengths.push(e)}addQueryGeometry(t,e){const{queryGeometry:r,queryGeometryType:s}=e,i=P(r.clone(),r,!1,!1,this._transform),n=C(i,s,!1,!1);t.queryGeometryType=s,t.queryGeometry={...n}}createPointGeometry(t){const e={x:0,y:0,spatialReference:t.spatialReference};return t.hasZ&&(e.z=0),t.hasM&&(e.m=0),e}addCoordinatePoint(t,e,r){const s=d(this._transform,"transform");switch(e=this._applyTransform(s,e,r,0),r){case 0:t.x=e;break;case 1:t.y=e;break;case 2:"z"in t?t.z=e:t.m=e;break;case 3:t.m=e}}_transformPathLikeValue(t,e){let r=0;e<=1&&(r=this._previousCoordinate[e],this._previousCoordinate[e]+=t);const s=d(this._transform,"transform");return this._applyTransform(s,t,e,r)}_addCoordinatePolyline(t,e,r){this._dehydratedAddPointsCoordinate(t.paths,e,r)}_addCoordinatePolygon(t,e,r){this._dehydratedAddPointsCoordinate(t.rings,e,r)}_addCoordinateMultipoint(t,e,r){r===0&&t.points.push([]);const s=this._transformPathLikeValue(e,r);t.points[t.points.length-1].push(s)}_createPolygonGeometry(t){return{rings:[[]],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}_createPolylineGeometry(t){return{paths:[[]],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}_createMultipointGeometry(t){return{points:[],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}_dehydratedAddPointsCoordinate(t,e,r){r===0&&this._toAddInCurrentPath--==0&&(t.push([]),this._toAddInCurrentPath=this._lengths[++this._currentLengthIndex]-1,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0);const s=this._transformPathLikeValue(e,r),i=t[t.length-1];r===0&&(this._coordinateBufferPtr=0,this._coordinateBuffer=new Array(this._vertexDimension),i.push(this._coordinateBuffer)),this._coordinateBuffer[this._coordinateBufferPtr++]=s}_deriveApplyTransform(t){const{hasZ:e,hasM:r}=t;return e&&r?b:e?f:r?A:c}}async function J(o,t,e){const r=m(o),s={...e},i=v.from(t),n=!i.quantizationParameters,{data:p}=await G(r,i,new B({sourceSpatialReference:i.sourceSpatialReference,applyTransform:n}),s);return p}let a=class extends R{constructor(...o){super(...o),this.requestOptions=null,this.url=null}normalizeCtorArgs(o,t){return typeof o!="string"?o:{url:o,...t}}get parsedUrl(){return this._parseUrl(this.url)}_parseUrl(o){return T(o)}_encode(o,t,e){const r={};for(const s in o){if(s==="declaredClass")continue;const i=o[s];if(i!=null&&typeof i!="function")if(Array.isArray(i)){r[s]=[];for(let n=0;n<i.length;n++)r[s][n]=this._encode(i[n])}else if(typeof i=="object")if(i.toJSON){const n=i.toJSON(e&&e[s]);r[s]=t?n:JSON.stringify(n)}else r[s]=t?i:JSON.stringify(i);else r[s]=i}return r}};u([l({readOnly:!0})],a.prototype,"parsedUrl",null),u([l()],a.prototype,"requestOptions",void 0),u([l({type:String})],a.prototype,"url",void 0),a=u([M("esri.tasks.Task")],a);const N=a;export{J as n,N as p};
