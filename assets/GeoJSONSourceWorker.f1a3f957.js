import{gn as _,dG as S,A as I,i0 as D,gk as $,B as Q,i1 as v,gl as A,aW as G,ax as M,a2 as P,d6 as Z,r as F,db as N,dx as z,U as B,by as R,dy as L,dA as U,i2 as W}from"./vendor.f8a4aecc.js";import{g as J}from"./FeatureStore.ce85c997.js";import{f as b,g as w}from"./projectionSupport.258a3ed3.js";import{e as V}from"./QueryEngine.88dac3fa.js";import{L as H,I as Y,T as K}from"./geojson.15090720.js";import{w as X,m as T,f as j,a as E,g as k}from"./sourceUtils.c8e59fc4.js";import"./BoundsStore.612a541f.js";import"./PooledRBush.eee5348f.js";import"./centroid.9e8a0f0b.js";import"./utils.8a4b09c9.js";import"./json.5152e73f.js";import"./QueryEngineResult.209e1055.js";import"./WhereClause.d1d9a78f.js";import"./executionError.c4c51b90.js";import"./timeSupport.f686ff6b.js";const ee={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class ge{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const i=[];await this._checkProjection(e.spatialReference);let s=null;e.url&&(s=await this._fetch(t==null?void 0:t.signal));const n=H(s,{geometryType:e.geometryType}),r=e.fields||n.fields||[],d=e.hasZ!=null?e.hasZ:n.hasZ,l=n.geometryType;let h=e.objectIdField||n.objectIdFieldName||"__OBJECTID";const m=e.spatialReference||_;let o=e.timeInfo;r===n.fields&&n.unknownFields.length>0&&i.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:n.unknownFields}});let a=new S(r).get(h);a?(a.type!=="esriFieldTypeString"&&(a.type="esriFieldTypeOID"),a.editable=!1,a.nullable=!1,h=a.name):(a={alias:h,name:h,type:n.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},r.unshift(a));const c={};for(const u of r){if(u.name==null&&(u.name=u.alias),u.alias==null&&(u.alias=u.name),!u.name)throw new I("geojson-layer:invalid-field-name","field name is missing",{field:u});if(!D.jsonValues.includes(u.type))throw new I("geojson-layer:invalid-field-type",`invalid type for field "${u.name}"`,{field:u});if(u.name!==a.name){const g=$(u);g!==void 0&&(c[u.name]=g)}}this._fieldsIndex=new S(r);const y=this._fieldsIndex.requiredFields.indexOf(a);if(y>-1&&this._fieldsIndex.requiredFields.splice(y,1),o){if(o.startTimeField){const u=this._fieldsIndex.get(o.startTimeField);u?(o.startTimeField=u.name,u.type="esriFieldTypeDate"):o.startTimeField=null}if(o.endTimeField){const u=this._fieldsIndex.get(o.endTimeField);u?(o.endTimeField=u.name,u.type="esriFieldTypeDate"):o.endTimeField=null}if(o.trackIdField){const u=this._fieldsIndex.get(o.trackIdField);u?o.trackIdField=u.name:(o.trackIdField=null,i.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:o}}))}o.startTimeField||o.endTimeField||(i.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:o}}),o=null)}const p=l?Q(l):void 0,f={warnings:i,featureErrors:[],layerDefinition:{...ee,drawingInfo:p!=null?p:void 0,templates:v(c),extent:void 0,geometryType:l,objectIdField:h,fields:r,hasZ:!!d,timeInfo:o}};this._queryEngine=new V({fields:r,geometryType:l,hasM:!1,hasZ:d,objectIdField:h,spatialReference:m,timeInfo:o,featureStore:new J({geometryType:l,hasM:!1,hasZ:d}),cacheSpatialQueries:!0}),this._createDefaultAttributes=A(c,h);const x=await this._createFeatures(s);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const O=this._normalizeFeatures(x,f.warnings,f.featureErrors);this._queryEngine.featureStore.addMany(O);const{fullExtent:C,timeExtent:q}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=C,q){const{start:u,end:g}=q;f.layerDefinition.timeInfo.timeExtent=[u,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:i}=this._queryEngine;return await Promise.all([X(t,i),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var s;this._loadOptions.customParameters=e,(s=this._snapshotTask)==null||s.abort(),this._snapshotTask=G(this._snapshotFeatures),this._snapshotTask.promise.then(n=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,n);const r=this._normalizeFeatures(n);r&&this._queryEngine.featureStore.addMany(r)},n=>{this._queryEngine.featureStore.clear(),M(n)||P.getLogger("esri.layers.GeoJSONLayer").error(new I("geojson-layer:refresh","An error occurred during refresh",{error:n}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:i}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:i}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:i,objectIdField:s}=this._queryEngine,n=Y(e,{geometryType:t,hasZ:i,objectIdField:s});if(!Z(this._queryEngine.spatialReference,_))for(const r of n)F(r.geometry)&&(r.geometry=N(w(z(r.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),_,this._queryEngine.spatialReference)));return n}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:i}=this._loadOptions,s=(await B(t,{responseType:"json",query:{...i},signal:e})).data;return await K(s),s}_normalizeFeatures(e,t,i){const{objectIdField:s}=this._queryEngine,n=[];for(const r of e){const d=this._createDefaultAttributes(),l=T(this._fieldsIndex,d,r.attributes,!0,t);l?i==null||i.push(l):(this._assignObjectId(d,r.attributes,!0),r.attributes=d,r.objectId=d[s],n.push(r))}return n}async _applyEdits(e){const{adds:t,updates:i,deletes:s}=e,n={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(n,t),i&&i.length&&this._applyUpdateEdits(n,i),s&&s.length){for(const l of s)n.deleteResults.push(j(l));this._queryEngine.featureStore.removeManyById(s)}const{fullExtent:r,timeExtent:d}=await this._queryEngine.fetchRecomputedExtents();return{extent:r,timeExtent:d,featureEditResults:n}}_applyAddEdits(e,t){var o;const{addResults:i}=e,{geometryType:s,hasM:n,hasZ:r,objectIdField:d,spatialReference:l,featureStore:h}=this._queryEngine,m=[];for(const a of t){if(a.geometry&&s!==R(a.geometry)){i.push(E("Incorrect geometry type."));continue}const c=this._createDefaultAttributes(),y=T(this._fieldsIndex,c,a.attributes);if(y)i.push(y);else{if(this._assignObjectId(c,a.attributes),a.attributes=c,a.uid!=null){const p=a.attributes[d];e.uidToObjectId[a.uid]=p}if(F(a.geometry)){const p=(o=a.geometry.spatialReference)!=null?o:l;a.geometry=w(k(a.geometry,p),p,l)}m.push(a),i.push(j(a.attributes[d]))}}h.addMany(L([],m,s,r,n,d))}_applyUpdateEdits({updateResults:e},t){var h;const{geometryType:i,hasM:s,hasZ:n,objectIdField:r,spatialReference:d,featureStore:l}=this._queryEngine;for(const m of t){const{attributes:o,geometry:a}=m,c=o&&o[r];if(c==null){e.push(E(`Identifier field ${r} missing`));continue}if(!l.has(c)){e.push(E(`Feature with object id ${c} missing`));continue}const y=U(l.getFeature(c),i,n,s);if(F(a)){if(i!==R(a)){e.push(E("Incorrect geometry type."));continue}const p=(h=a.spatialReference)!=null?h:d;y.geometry=w(k(a,p),p,d)}if(o){const p=T(this._fieldsIndex,y.attributes,o);if(p){e.push(p);continue}}l.add(W(y,i,n,s,r)),e.push(j(c))}}_createObjectIdGenerator(e,t){const i=e.fieldsIndex.get(e.objectIdField);if(i.type==="esriFieldTypeString")return()=>i.name+"-"+Date.now().toString(16);let s=Number.NEGATIVE_INFINITY;for(const n of t)n.objectId&&(s=Math.max(s,n.objectId));return s=Math.max(0,s)+1,()=>s++}_assignObjectId(e,t,i=!1){const s=this._queryEngine.objectIdField;e[s]=i&&s in t?t[s]:this._objectIdGenerator()}async _checkProjection(e){try{await b(_,e)}catch{throw new I("geojson-layer","Projection not supported")}}}export{ge as default};
