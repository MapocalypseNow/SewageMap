import{e as l,y as c,n as w}from"./cast-4943406f.js";import{s as g}from"./Error-8814705f.js";import{j as h}from"./promiseUtils-ec14a623.js";import{l as I}from"./reactiveUtils-3389689f.js";import"./typedArrayUtil-bd69bba0.js";import"./ensureType-9613b5f0.js";import{E as f}from"./Extent-d21a2637.js";import{t as S,n as d}from"./imageUtils-f4f66bf0.js";import{y as T,u as v}from"./LayerView-79a52e98.js";import{h as V}from"./TileStore-293c55d0.js";import{e as y}from"./TileKey-75a33c7e.js";import{y as x,r as M}from"./TileStrategy-4661211c.js";import{i as q}from"./RefreshableLayerView-9b436f42.js";import"./string-cc430a78.js";import"./nextTick-3ee5a785.js";import"./BitmapTileContainer-eed39a8e.js";import"./aaBoundingRect-647e206b.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./mat3f32-d3d088e8.js";import"./Bitmap-1884319c.js";import"./mat3-45e3f2eb.js";import"./vec2f32-461e65a9.js";import"./utils-6c2a743f.js";import"./parser-da666a95.js";import"./colorUtils-639f4d25.js";import"./screenUtils-7afeb41c.js";import"./mat4-62d5e6a4.js";import"./Evented-28d49a6f.js";import"./enums-4ca4641f.js";import"./MaterialKey-1f59feb3.js";import"./Utils-3e9667e7.js";import"./enums-8bf08d0c.js";import"./enums-64ab819c.js";import"./Texture-48c77062.js";import"./context-util-7d5aeb56.js";import"./VertexElementDescriptor-2925c6af.js";import"./heatmapUtils-90a13d85.js";import"./vec4f64-018b3fa6.js";import"./Color-ebbea628.js";import"./TileContainer-1bf5c725.js";import"./WGLContainer-29833e70.js";import"./pixelUtils-46dc1a17.js";import"./vec2f64-e0301652.js";import"./VertexArrayObject-d7e1aaa4.js";import"./ProgramTemplate-81287b8c.js";import"./StyleDefinition-3c6a4c69.js";import"./config-1337d16e.js";import"./GeometryUtils-c093d234.js";import"./earcut-58237617.js";import"./vec2-f978aef8.js";import"./featureConversionUtils-e981d065.js";import"./jsonUtils-7333a4d1.js";import"./Polyline-98ddf509.js";import"./OptimizedFeature-ec32193d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./Collection-e1ec52f9.js";import"./SimpleObservable-b403cd38.js";import"./collectionUtils-28848f7d.js";import"./geometry-da69b92c.js";import"./typeUtils-98cd71e2.js";import"./jsonMap-9318d50f.js";import"./HandleOwner-46fb81da.js";import"./Identifiable-28626f77.js";import"./Promise-9613afa4.js";import"./Queue-f6edac75.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./Query-ca5b0d4c.js";import"./TimeExtent-fd94e986.js";import"./enumeration-1740c98c.js";import"./Field-27137e22.js";import"./fieldType-ff12d8db.js";import"./Clonable-7eedeb5c.js";const R=[102113,102100,3857,3785,900913],Q=[0,0];let s=class extends q(S(T(v))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this._tileRequests=new Map,this.layer=null}get tileMatrixSet(){const t=this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);return t?(t.id!==this.layer.activeLayer.tileMatrixSetId&&(this.layer.activeLayer.tileMatrixSetId=t.id),t):null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume()}attach(){if(!this.tileMatrixSet)return;const{tileInfo:t}=this.tileMatrixSet;this._tileInfoView=new V(t),this._fetchQueue=new x({tileInfoView:this._tileInfoView,concurrency:16,process:(e,i)=>this.fetchTile(e,i)}),this._tileStrategy=new M({cachePolicy:"keep",resampling:!0,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.handles.add(I(()=>{var e,i;return[(i=(e=this.layer)==null?void 0:e.activeLayer)==null?void 0:i.styleId,this.tileMatrixSet]},()=>this._refresh()),this.declaredClass),super.attach()}detach(){var t,e;super.detach(),this.handles.remove(this.declaredClass),(t=this._tileStrategy)==null||t.destroy(),(e=this._fetchQueue)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(Q,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(e),this._bitmapView.addChild(e),this.requestUpdate(),e}async doRefresh(){!this.attached||this.updateRequested||this.suspended||this._refresh()}isUpdating(){var t;return((t=this._fetchQueue)==null?void 0:t.updating)??!1}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:p=0}=e;if(!i)return this._fetchImage(t,r);const a=new y(0,0,0,0);let m;try{await i.fetchAvailabilityUpsample(t.level,t.row,t.col,a,{signal:r}),m=await this._fetchImage(a,r)}catch(o){if(h(o))throw o;if(p<3){const n=this._tileInfoView.getTileParentId(t.id);if(n){const u=new y(n),_=await this.fetchTile(u,{...e,resamplingLevel:p+1});return d(this._tileInfoView,_,u,t)}}throw o}return d(this._tileInfoView,m,a,t)}canResume(){const t=super.canResume();return t&&this.tileMatrixSet!==null}supportsSpatialReference(t){return this.layer.activeLayer.tileMatrixSets.some(e=>f(e.tileInfo.spatialReference,t))}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){h(e)||g.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}_refresh(){this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>{if(!t.bitmap.source)return;const e={id:t.key.id,fulfilled:!1,promise:this._fetchQueue.push(t.key).then(i=>{t.bitmap.source=i}).catch(i=>{h(i)||(t.bitmap.source=null)}).finally(()=>{t.requestRender(),e.fulfilled=!0})};this._tileRequests.set(t,e)})}_getTileMatrixSetBySpatialReference(t){const e=this.view.spatialReference;if(!t.tileMatrixSets)return null;let i=t.tileMatrixSets.find(r=>f(r.tileInfo.spatialReference,e));return!i&&e.isWebMercator&&(i=t.tileMatrixSets.find(r=>R.includes(r.tileInfo.spatialReference.wkid))),i}};l([c()],s.prototype,"_fetchQueue",void 0),l([c({readOnly:!0})],s.prototype,"tileMatrixSet",null),s=l([w("esri.views.2d.layers.WMTSLayerView2D")],s);const Nt=s;export{Nt as default};
