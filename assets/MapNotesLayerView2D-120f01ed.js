import{e as f,n as w}from"./cast-4943406f.js";import{g as y}from"./Graphic-13c64b79.js";import{j as _}from"./Collection-e1ec52f9.js";import{r as m,t as V}from"./typedArrayUtil-bd69bba0.js";import{l as h,h as a,a as v}from"./reactiveUtils-3389689f.js";import"./Error-8814705f.js";import"./ensureType-9613b5f0.js";import"./string-cc430a78.js";import{i as C}from"./utils-6c2a743f.js";import{r as b}from"./GroupContainer-cc417325.js";import{y as H,u as T}from"./LayerView-79a52e98.js";import{i as c}from"./GraphicContainer-811b32c6.js";import{o as g}from"./BaseGraphicContainer-fb7701cc.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-ec14a623.js";import"./geometry-da69b92c.js";import"./Extent-d21a2637.js";import"./Polyline-98ddf509.js";import"./typeUtils-98cd71e2.js";import"./jsonMap-9318d50f.js";import"./PopupTemplate-9e34fd80.js";import"./Clonable-7eedeb5c.js";import"./fieldUtils-605e1353.js";import"./preload-helper-6c8d3039.js";import"./arcadeOnDemand-5200ab6b.js";import"./enumeration-1740c98c.js";import"./number-d7fe9942.js";import"./locale-30120714.js";import"./Identifiable-28626f77.js";import"./symbols-26ff8002.js";import"./CIMSymbol-fc3b1809.js";import"./Symbol-f543a02b.js";import"./Color-ebbea628.js";import"./colorUtils-639f4d25.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-dc8d0a85.js";import"./aaBoundingBox-58fec4c8.js";import"./request-9ab300ca.js";import"./persistableUrlUtils-d6987fba.js";import"./collectionUtils-28848f7d.js";import"./Portal-c85307b1.js";import"./Loadable-8b974e55.js";import"./Promise-9613afa4.js";import"./PortalGroup-e30a1480.js";import"./PortalUser-6c405f61.js";import"./jsonUtils-7333a4d1.js";import"./Evented-28d49a6f.js";import"./SimpleObservable-b403cd38.js";import"./mat3f32-d3d088e8.js";import"./parser-da666a95.js";import"./mat4-62d5e6a4.js";import"./enums-4ca4641f.js";import"./MaterialKey-1f59feb3.js";import"./Utils-3e9667e7.js";import"./enums-8bf08d0c.js";import"./enums-64ab819c.js";import"./Texture-48c77062.js";import"./context-util-7d5aeb56.js";import"./VertexElementDescriptor-2925c6af.js";import"./heatmapUtils-90a13d85.js";import"./vec4f64-018b3fa6.js";import"./WGLContainer-29833e70.js";import"./mat3-45e3f2eb.js";import"./vec2f32-461e65a9.js";import"./pixelUtils-46dc1a17.js";import"./vec2f64-e0301652.js";import"./VertexArrayObject-d7e1aaa4.js";import"./ProgramTemplate-81287b8c.js";import"./StyleDefinition-3c6a4c69.js";import"./config-1337d16e.js";import"./GeometryUtils-c093d234.js";import"./earcut-58237617.js";import"./vec2-f978aef8.js";import"./featureConversionUtils-e981d065.js";import"./OptimizedFeature-ec32193d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./HandleOwner-46fb81da.js";import"./ExpandedCIM-eed2255c.js";import"./BidiEngine-836b7ef6.js";import"./aaBoundingRect-647e206b.js";import"./mat2d-80bd93af.js";import"./Rect-ea14f53a.js";import"./utils-179e89a7.js";import"./generateRendererUtils-717e0562.js";import"./colorRamps-08b6e1ac.js";import"./GeometryUtils-eebff0a0.js";import"./floatRGBA-305df8f3.js";import"./normalizeUtilsSync-0179d35a.js";import"./normalizeUtils-758f8b63.js";import"./projectionSupport-80e82945.js";import"./projection-462aeb9f.js";import"./unitUtils-bc71b997.js";import"./assets-2905a8db.js";import"./zscale-3fafe111.js";import"./json-48e3ea08.js";import"./labelingInfo-b488ae0e.js";import"./labelUtils-f67e4fba.js";import"./defaultsJSON-b087dd4d.js";import"./jsonUtils-218ba25d.js";import"./FeatureContainer-785f32e4.js";import"./TileContainer-1bf5c725.js";import"./TileKey-75a33c7e.js";import"./Queue-f6edac75.js";import"./visualVariablesUtils-7a7dd725.js";import"./visualVariablesUtils-ed2679c7.js";import"./lengthUtils-b711b4b2.js";import"./capabilities-8b80f0f1.js";import"./Matcher-5bf6a748.js";import"./TileStrategy-4661211c.js";import"./TileStore-293c55d0.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./Query-ca5b0d4c.js";import"./TimeExtent-fd94e986.js";import"./Field-27137e22.js";import"./fieldType-ff12d8db.js";import"./tileUtils-09d0ab26.js";import"./TileClipper-b584e552.js";import"./Geometry-daada628.js";import"./LRUCache-4d2d0a4a.js";import"./MemCache-786f3df9.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-e2a5393c.js";import"./schemaUtils-0437e851.js";import"./LayerFloorInfo-b2b66573.js";import"./diffUtils-2ca899cf.js";import"./createSymbolSchema-ead7d58c.js";import"./rendererUtils-6b7c4a91.js";import"./FeatureReductionLayer-c35575f9.js";import"./BlendLayer-8c6b6724.js";import"./UniqueValueRenderer-e68a70b1.js";import"./ColorStop-5a499504.js";import"./sizeVariableUtils-d4870b0d.js";import"./compilerUtils-527a276b.js";import"./jsonUtils-e7abff59.js";import"./DictionaryLoader-b16ebe69.js";import"./deprecate-bd315c0b.js";import"./OperationalLayer-620e6022.js";import"./ElevationInfo-2dc5cc64.js";import"./util-9fb47bc4.js";import"./ComputedAttributeStorage-ad7847f7.js";import"./FeatureSetReader-6983c047.js";import"./centroid-1300048c.js";import"./FieldsIndex-e1d877a8.js";import"./vec3f32-4322908d.js";const d="sublayers",n="layerView",I=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends H(T){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new b}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(r=>!!r.popupTemplate)).flat()}*graphicsViews(){m(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():m(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),r=>{const e=r.hitTest(i);if(m(this._graphicsViewsFeatureCollectionMap)){const p=this._graphicsViewsFeatureCollectionMap.get(r);for(const o of e)!o.popupTemplate&&p.popupTemplate&&(o.popupTemplate=p.popupTemplate),o.sourceLayer=o.layer=this.layer}return e}).flat().map(r=>({type:"graphic",graphic:r,layer:this.layer,mapPoint:i}))}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof y?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):_.isCollection(i)&&(t=i.map(r=>r&&r.uid).toArray()),t=t.filter(r=>r!=null),t.length?(this._addHighlight(t),{remove:()=>{this._removeHighlight(t)}}):I}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),r=this.layer.featureCollections;if(m(r)&&r.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const e of r){const p=new c(this.view.featuresTilingScheme),o=new g({view:i,graphics:e.source,renderer:e.renderer,requestUpdateCallback:t,container:p});this._graphicsViewsFeatureCollectionMap.set(o,e),this.container.addChild(o.container),this.handles.add([h(()=>e.visible,s=>o.container.visible=s,a),h(()=>o.updating,()=>this.notifyChange("updating"),a)],n)}this._updateHighlight()}else m(this.layer.sublayers)&&this.handles.add(v(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),V(this.layer.sublayers))return;const i=[],t=this.view,r=()=>this.requestUpdate();for(const e of this.layer.sublayers){const p=new C,o=new c(this.view.featuresTilingScheme);o.fadeTransitionEnabled=!0;const s=new g({view:t,graphics:e.graphics,requestUpdateCallback:r,container:o});this.handles.add([e.on("graphic-update",s.graphicUpdateHandler),h(()=>e.visible,u=>s.container.visible=u,a),h(()=>s.updating,()=>this.notifyChange("updating"),a)],n),p.addChild(s.container),this.container.addChild(p),i.push(s)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=f([w("esri.views.2d.layers.MapNotesLayerView2D")],l);const cr=l;export{cr as default};
