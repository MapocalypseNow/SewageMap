import{it as S,jb as w,iu as I,dh as O,di as $,dj as E,dk as T,iv as j,iG as M,jc as L,aT as P,v as N,bD as R,jw as v,f8 as g,e_ as q,U as f,w as F,T as J,iH as U,jd as k,s as b,an as A,B as s,C as n,dn as _,f1 as z,dq as B,D,b as V,iw as C}from"./index.eddec14a.js";import{E as G,y as H,z as K}from"./SublayersOwner.8e8ea1b2.js";import{c as W}from"./ExportImageParameters.182f2a73.js";import{n as x}from"./sublayerUtils.18477005.js";import"./Version.858d1735.js";import"./floorFilterUtils.05eb8c6a.js";let i=class extends S(w(I(G(H(O($(E(T(j(M(L(P(V))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=N(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(R).then(()=>this._fetchService(r))),Promise.resolve(this)}readImageFormat(e,r){const p=r.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,p,t){if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:a})=>a&&a.toArray().reverse()).toArray();let l=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const a=v(t.origin);if(a===g.PORTAL_ITEM){const y=this.createSublayersForOrigin("service").sublayers;l=x(o,y,g.SERVICE)}else if(a>g.PORTAL_ITEM){const y=this.createSublayersForOrigin("portal-item");l=x(o,y.sublayers,v(y.origin))}}const c=[],m={writeSublayerStructure:l,...t};let h=l;o.forEach(a=>{const y=a.write({},m);c.push(y),h=h||a.originOf("visible")==="user"}),c.some(a=>Object.keys(a).length>1)&&(r.layers=c),h&&(r.visibleLayers=o.filter(a=>a.visible).map(a=>a.id))}createExportImageParameters(e,r,p,t){const o=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new W({layer:this,floors:t==null?void 0:t.floors,scale:q({extent:e,width:r})*o}),c=l.toJSON();l.destroy();const m=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},h=e&&e.spatialReference,a=h.wkid||JSON.stringify(h.toJSON());c.dpi*=o;const y={};if(t!=null&&t.timeExtent){const{start:d,end:u}=t.timeExtent.toJSON();y.time=d&&u&&d===u?""+d:`${d!=null?d:"null"},${u!=null?u:"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:a,imageSR:a,size:r+","+p,...c,...m,...y}}async fetchImage(e,r,p,t){return this._fetchImage("image",e,r,p,t)}async fetchImageBitmap(e,r,p,t){const o=await this._fetchImage("blob",e,r,p,t);return createImageBitmap(o)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await f(this.url,r),{extent:t,fullExtent:o,timeExtent:l}=p,c=t||o;return{fullExtent:c&&F.fromJSON(c),timeExtent:l&&J.fromJSON({start:l[0],end:l[1]})}}loadAll(){return U(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return k(this,e)}async _fetchImage(e,r,p,t,o){var m;const l={responseType:e,signal:(m=o==null?void 0:o.signal)!=null?m:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,p,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},c=this.parsedUrl.path+"/export";if(l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});try{const{data:h}=await f(c,l);return h}catch(h){throw A(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${c}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:p}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};s([n({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([n()],i.prototype,"dpi",void 0),s([n()],i.prototype,"gdbVersion",void 0),s([n()],i.prototype,"imageFormat",void 0),s([_("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([n()],i.prototype,"imageTransparency",void 0),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([n({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([n({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([n({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([n()],i.prototype,"sourceJSON",void 0),s([n({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([z("sublayers",{layers:{type:[K]},visibleLayers:{type:[C]}})],i.prototype,"writeSublayers",null),s([n({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([n({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([n(B)],i.prototype,"url",void 0),i=s([D("esri.layers.MapImageLayer")],i);const re=i;export{re as default};
