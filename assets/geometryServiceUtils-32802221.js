import{b as l,a as f}from"./Error-8814705f.js";import{j as S}from"./Portal-c85307b1.js";import{U as h}from"./request-9ab300ca.js";import{b as d}from"./ensureType-9613b5f0.js";import{c}from"./jsonUtils-7333a4d1.js";import{f as w,b as R,o as v}from"./normalizeUtils-758f8b63.js";import{e as m,y as p,n as $,l as J}from"./cast-4943406f.js";import"./typedArrayUtil-bd69bba0.js";import"./string-cc430a78.js";import"./preload-helper-6c8d3039.js";import"./Loadable-8b974e55.js";import"./Promise-9613afa4.js";import"./promiseUtils-ec14a623.js";import"./Extent-d21a2637.js";import"./locale-30120714.js";import"./PortalGroup-e30a1480.js";import"./jsonMap-9318d50f.js";import"./PortalUser-6c405f61.js";import"./nextTick-3ee5a785.js";import"./Polyline-98ddf509.js";import"./geometry-da69b92c.js";import"./typeUtils-98cd71e2.js";let a=class extends J{constructor(r){super(r),this.geometries=null,this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const r=this.geometries.map(i=>i.toJSON()),e=this.geometries[0],t={};return t.outSR=this.outSpatialReference.wkid||JSON.stringify(this.outSpatialReference.toJSON()),t.inSR=e.spatialReference.wkid||JSON.stringify(e.spatialReference.toJSON()),t.geometries=JSON.stringify({geometryType:c(e),geometries:r}),this.transformation&&(t.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(t.transformForward=this.transformForward),t}};m([p()],a.prototype,"geometries",void 0),m([p({json:{read:{source:"outSR"}}})],a.prototype,"outSpatialReference",void 0),m([p()],a.prototype,"transformation",void 0),m([p()],a.prototype,"transformForward",void 0),a=m([$("esri.rest.support.ProjectParameters")],a);const u=a,N=d(u);async function O(o,r,e){r=N(r);const t=w(o),i={...t.query,f:"json",...r.toJSON()},n=r.outSpatialReference,s=c(r.geometries[0]),g=R(i,e);return h(t.path+"/project",g).then(({data:{geometries:y}})=>v(y,s,n))}async function j(o=null,r){var i,n;if(l.geometryServiceUrl)return l.geometryServiceUrl;if(!o)throw new f("internal:geometry-service-url-not-configured");let e;e="portal"in o?o.portal||S.getDefault():o,await e.load({signal:r});const t=(n=(i=e.helperServices)==null?void 0:i.geometry)==null?void 0:n.url;if(!t)throw new f("internal:geometry-service-url-not-configured");return t}async function X(o,r,e=null,t){const i=await j(e,t),n=new u;n.geometries=[o],n.outSpatialReference=r;const s=await O(i,n,{signal:t});if(s&&Array.isArray(s)&&s.length===1)return s[0];throw new f("internal:geometry-service-projection-failed")}export{j as getGeometryServiceURL,X as projectGeometry};
