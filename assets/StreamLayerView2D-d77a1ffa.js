import{a8 as s,a9 as n,aa as h,aH as p,r as l,a1 as f,I as c,a3 as m}from"./vendor-445d19db.js";import v from"./FeatureLayerView2D-bf3b2cb7.js";import{e as O}from"./util-40ea0c97.js";import"./utils-6396d15b.js";import"./enums-4ca4641f.js";import"./MaterialKey-5504317a.js";import"./Utils-cdacad72.js";import"./enums-8bf08d0c.js";import"./enums-64ab819c.js";import"./Texture-a2352f23.js";import"./VertexElementDescriptor-2925c6af.js";import"./LayerView-2f4bfb36.js";import"./schemaUtils-c8c76855.js";import"./visualVariablesUtils-e0bd40c0.js";import"./createSymbolSchema-15243994.js";import"./ExpandedCIM-1bd63987.js";import"./BidiEngine-836b7ef6.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-ad21a9c2.js";import"./GeometryUtils-eebff0a0.js";import"./floatRGBA-02bd94bd.js";import"./rendererUtils-d69d5f00.js";import"./floorFilterUtils-080a7cd2.js";import"./popupUtils-feede9e6.js";import"./RefreshableLayerView-10331e5a.js";function d(e,t){if(c(e)&&c(t))return null;const r={};return m(t)&&(r.geometry=t.toJSON()),m(e)&&(r.where=e),r}let o=class extends v{constructor(){super(...arguments),this._enabledDataReceived=!1,this.errorString=null,this.connectionStatus="disconnected"}initialize(){this.handles.add([p(()=>{var e;return(e=this.layer)==null?void 0:e.purgeOptions},()=>this._update()),p(()=>this.suspended,e=>{e?this._proxy.pauseStream():this._proxy.resumeStream()})])}get connectionError(){if(this.errorString)return new l("stream-controller",this.errorString)}on(e,t){e==="data-received"&&(this._enabledDataReceived=!0,this._proxy.enableEvent("data-received",!0));const r=super.on(e,t),i=this;return{remove(){r.remove(),e==="data-received"&&(i._proxy.closed||i.hasEventListener("data-received")||i._proxy.enableEvent("data-received",!1))}}}queryLatestObservations(e,t){if(!(this.layer.timeInfo.endField||this.layer.timeInfo.startField))throw new l("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._proxy.queryLatestObservations(this._cleanUpQuery(e),t).then(r=>{const i=f.fromJSON(r);return i.features.forEach(a=>{a.layer=this.layer,a.sourceLayer=this.layer}),i})}detach(){super.detach(),this.connectionStatus="disconnected"}_createClientOptions(){return{...super._createClientOptions(),setProperty:e=>{this.set(e.propertyName,e.value)}}}_createTileRendererHash(e){const t=`${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(d(this.layer.definitionExpression,this.layer.geometryDefinition))})`;return super._createTileRendererHash(e)+t}async _createServiceOptions(){const e=this.layer,{objectIdField:t}=e,r=e.fields.map(u=>u.toJSON()),i=O(e.geometryType),a=e.timeInfo&&e.timeInfo.toJSON()||null,y=e.spatialReference?e.spatialReference.toJSON():null;return{type:"stream",fields:r,geometryType:i,objectIdField:t,timeInfo:a,source:this.layer.parsedUrl,serviceFilter:d(this.layer.definitionExpression,this.layer.geometryDefinition),purgeOptions:this.layer.purgeOptions.toJSON(),enableDataReceived:this._enabledDataReceived,spatialReference:y,maxReconnectionAttempts:this.layer.maxReconnectionAttempts,maxReconnectionInterval:this.layer.maxReconnectionInterval,updateInterval:this.layer.updateInterval,customParameters:e.customParameters}}};s([n()],o.prototype,"errorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n()],o.prototype,"connectionStatus",void 0),o=s([h("esri.views.2d.layers.StreamLayerView2D")],o);const B=o;export{B as default};
