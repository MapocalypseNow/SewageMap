import{eG as w,eH as y,eI as I,eJ as V,aT as v,d6 as H,ax as p,d9 as c,a2 as T,f as o,g,G as q}from"./vendor.f8a4aecc.js";import"./MagnifierPrograms.c0dd969a.js";import"./Container.edf2e803.js";import"./BufferPool.d6cdd39a.js";import"./color.1638605e.js";import"./WGLContainer.65e67344.js";import"./enums.3c1fa5b5.js";import"./Texture.1db32977.js";import"./ProgramTemplate.6a189101.js";import"./MaterialKey.04e0f9bd.js";import"./utils.370c18a5.js";import"./VertexArrayObject.e7a7b75d.js";import"./StyleDefinition.dc47b5d4.js";import"./enums.7f1ae3cd.js";import"./OrderIndependentTransparency.6e4bef96.js";import"./floatRGBA.751864de.js";import"./webgl-debug.bb689b12.js";import{a as U}from"./BaseGraphicContainer.a6b12718.js";import"./FeatureContainer.abc30b30.js";import"./earcut.a219bf29.js";import"./vec3f32.4d8dc001.js";import{t as Q,o as f,n as d}from"./imageUtils.f045ed5d.js";import{f as S,u as b}from"./LayerView.caf62521.js";import{n as C}from"./HighlightGraphicContainer.f53d6e92.js";import{i as G}from"./RefreshableLayerView.7d0750c4.js";import{P as k,S as F,a as P}from"./drapedUtils.59b86331.js";import"./ExpandedCIM.4718187a.js";import"./BidiEngine.f5b8c89f.js";import"./GeometryUtils.6fd53e6d.js";import"./enums.9a5c29c3.js";import"./definitions.1d569ae6.js";import"./Rect.e8e4d18d.js";import"./rasterizingUtils.74dc74aa.js";import"./GeometryUtils.ccd3b111.js";import"./imageutils.5a0097f3.js";import"./Matcher.117df6ef.js";import"./visualVariablesUtils.3cee809d.js";import"./visualVariablesUtils.fe2e172f.js";import"./tileUtils.dbdde791.js";import"./TurboLine.12a96cfa.js";import"./CircularArray.144fff05.js";import"./ComputedAttributeStorage.480bcf13.js";import"./ArcadeDate.026fbded.js";import"./executionError.c4c51b90.js";import"./arcadeTimeUtils.13859c15.js";import"./centroid.9e8a0f0b.js";import"./VertexElementDescriptor.5da9dfe9.js";import"./config.86ceb802.js";import"./basicInterfaces.67cafc7c.js";import"./normalizeUtilsSync.58e80e7c.js";import"./projectionSupport.258a3ed3.js";import"./json.5152e73f.js";import"./schemaUtils.a040cae2.js";import"./createSymbolSchema.11788a82.js";import"./util.05d7e1cf.js";import"./TileContainer.65e93271.js";import"./BitmapTileContainer.343d5d22.js";import"./Bitmap.f76d382c.js";import"./floorFilterUtils.4de71259.js";import"./sublayerUtils.ac353a39.js";import"./popupUtils.f65f9528.js";const R=[0,0];let h=class extends G(Q(S(b))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,i)=>this.fetchTile(e,i)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),k(this,this.layer)){const e=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new F({createFetchPopupFeaturesQueryGeometry:(i,r)=>P(i,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(i,r)=>{e.graphicUpdateHandler({graphic:i,property:r})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(v(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return H((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>this._enqueueTileFetch(t)))}isUpdating(){var t,e;return(e=(t=this._fetchQueue)==null?void 0:t.updating)!=null?e:!1}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(e),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:n=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(s){if(!p(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(n<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const m=new c(u),_=await this.fetchTile(m,{...e,resamplingLevel:n+1});return d(this._tileInfoView,_,m,t)}}throw s}const a=new c(0,0,0,0);let l;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,a,{signal:r}),a.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);l=await this._fetchImage(a,r)}catch(s){if(p(s))throw s;l=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,l,a,t):l}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){p(e)||T.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};o([g()],h.prototype,"_fetchQueue",void 0),o([g()],h.prototype,"resampling",null),h=o([q("esri.views.2d.layers.TileLayerView2D")],h);const Dt=h;export{Dt as default};
