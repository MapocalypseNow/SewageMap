import{ea as s,m as p,aB as h,aC as a,aD as o}from"./vendor-f61b19da.js";import{y as g,u as m}from"./LayerView-db230c5b.js";import{i as l}from"./GraphicContainer-e4fd1e04.js";import{o as c}from"./BaseGraphicContainer-8fd74117.js";import"./utils-073a76a7.js";import"./enums-4ca4641f.js";import"./MaterialKey-6fc95429.js";import"./Utils-823f2fe9.js";import"./definitions-315e9606.js";import"./enums-64ab819c.js";import"./Texture-a45928bd.js";import"./VertexElementDescriptor-2925c6af.js";import"./ExpandedCIM-387e7205.js";import"./BidiEngine-836b7ef6.js";import"./Rect-ea14f53a.js";import"./GeometryUtils-eebff0a0.js";import"./floatRGBA-51b72951.js";import"./normalizeUtilsSync-20aebf4d.js";import"./projectionSupport-d522253e.js";import"./json-48e3ea08.js";import"./VertexArrayObject-336b55d9.js";import"./FeatureContainer-d2ba38b3.js";import"./TileContainer-ef5effe6.js";import"./WGLContainer-78c0e7a1.js";import"./pixelUtils-e7c1af11.js";import"./ProgramTemplate-0eca8760.js";import"./StyleDefinition-beb706e3.js";import"./config-1337d16e.js";import"./GeometryUtils-c093d234.js";import"./earcut-58237617.js";import"./visualVariablesUtils-69d25540.js";import"./visualVariablesUtils-9b7ef877.js";import"./Matcher-341f1577.js";import"./tileUtils-f4264142.js";import"./TileClipper-5d3dda2e.js";import"./Geometry-daada628.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-bf9f517f.js";import"./createSymbolSchema-59778335.js";import"./rendererUtils-ca5f4ebc.js";import"./util-b2f998f9.js";import"./ComputedAttributeStorage-f8b84bd3.js";import"./FeatureSetReader-d42fce40.js";import"./centroid-7bcd4b03.js";import"./vec3f32-4322908d.js";const n={remove(){},pause(){},resume(){}};let r=class extends g(m){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new c({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new l(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.graphicsView=null,this.handles.remove("graphicslayerview2d")}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){if(this.graphicsView)return this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate)}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof s?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):p.isCollection(i)&&i.length>0&&(t=i.map(e=>e&&e.uid).toArray()),t=t==null?void 0:t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):n}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};h([a()],r.prototype,"graphicsView",void 0),r=h([o("esri.views.2d.layers.GraphicsLayerView2D")],r);const si=r;export{si as default};
