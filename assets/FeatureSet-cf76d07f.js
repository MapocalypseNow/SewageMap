import{e as f,y as u,l as S,n as j}from"./cast-4943406f.js";import{i as F}from"./geometry-da69b92c.js";import{g as T}from"./Graphic-13c64b79.js";import{s as P}from"./jsonMap-9318d50f.js";import{y as q}from"./string-cc430a78.js";import{r as h,e as J}from"./typedArrayUtil-bd69bba0.js";import"./ensureType-9613b5f0.js";import{o as w,r as G,k as x}from"./Extent-d21a2637.js";import{v as O,y as d}from"./jsonUtils-7333a4d1.js";import{y as $}from"./Field-27137e22.js";import"./Error-8814705f.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-ec14a623.js";import"./Polyline-98ddf509.js";import"./typeUtils-98cd71e2.js";import"./PopupTemplate-9e34fd80.js";import"./Clonable-7eedeb5c.js";import"./Collection-e1ec52f9.js";import"./Evented-28d49a6f.js";import"./SimpleObservable-b403cd38.js";import"./fieldUtils-605e1353.js";import"./preload-helper-6c8d3039.js";import"./arcadeOnDemand-5200ab6b.js";import"./enumeration-1740c98c.js";import"./number-d7fe9942.js";import"./locale-30120714.js";import"./Identifiable-28626f77.js";import"./symbols-26ff8002.js";import"./CIMSymbol-fc3b1809.js";import"./Symbol-f543a02b.js";import"./Color-ebbea628.js";import"./colorUtils-639f4d25.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-dc8d0a85.js";import"./aaBoundingBox-58fec4c8.js";import"./request-9ab300ca.js";import"./persistableUrlUtils-d6987fba.js";import"./collectionUtils-28848f7d.js";import"./Portal-c85307b1.js";import"./Loadable-8b974e55.js";import"./Promise-9613afa4.js";import"./PortalGroup-e30a1480.js";import"./PortalUser-6c405f61.js";import"./fieldType-ff12d8db.js";var v;const R=new P({esriGeometryPoint:"point",esriGeometryMultipoint:"multipoint",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"extent",mesh:"mesh","":null});let y=v=class extends S{constructor(t){super(t),this.displayFieldName=null,this.exceededTransferLimit=!1,this.features=[],this.fields=null,this.geometryType=null,this.hasM=!1,this.hasZ=!1,this.queryGeometry=null,this.spatialReference=null}readFeatures(t,o){var n;const r=x.fromJSON(o.spatialReference),e=[];for(let s=0;s<t.length;s++){const p=t[s],a=T.fromJSON(p),m=p.geometry&&p.geometry.spatialReference;h(a.geometry)&&!m&&(a.geometry.spatialReference=r);const i=p.aggregateGeometries,l=a.aggregateGeometries;if(i&&h(l))for(const g in l){const c=l[g],N=(n=i[g])==null?void 0:n.spatialReference;h(c)&&!N&&(c.spatialReference=r)}e.push(a)}return e}writeGeometryType(t,o,r,e){if(t)return void R.write(t,o,r,e);const{features:n}=this;if(n){for(const s of n)if(s&&h(s.geometry))return void R.write(s.geometry.type,o,r,e)}}readQueryGeometry(t,o){if(!t)return null;const r=!!t.spatialReference,e=O(t);return e&&!r&&o.spatialReference&&(e.spatialReference=x.fromJSON(o.spatialReference)),e}writeSpatialReference(t,o){if(t)return void(o.spatialReference=t.toJSON());const{features:r}=this;if(r){for(const e of r)if(e&&h(e.geometry)&&e.geometry.spatialReference)return void(o.spatialReference=e.geometry.spatialReference.toJSON())}}clone(){return new v(this.cloneProperties())}cloneProperties(){return q({displayFieldName:this.displayFieldName,exceededTransferLimit:this.exceededTransferLimit,features:this.features,fields:this.fields,geometryType:this.geometryType,hasM:this.hasM,hasZ:this.hasZ,queryGeometry:this.queryGeometry,spatialReference:this.spatialReference,transform:this.transform})}toJSON(t){const o=this.write();if(o.features&&Array.isArray(t)&&t.length>0)for(let r=0;r<o.features.length;r++){const e=o.features[r];if(e.geometry){const n=t&&t[r];e.geometry=n&&n.toJSON()||e.geometry}}return o}quantize(t){const{scale:[o,r],translate:[e,n]}=t,s=i=>Math.round((i-e)/o),p=i=>Math.round((n-i)/r),a=this.features,m=this._getQuantizationFunction(this.geometryType,s,p);for(let i=0,l=a.length;i<l;i++)m!=null&&m(J(a[i].geometry))||(a.splice(i,1),i--,l--);return this.transform=t,this}unquantize(){const{geometryType:t,features:o,transform:r}=this;if(!r)return this;const{translate:[e,n],scale:[s,p]}=r,a=l=>l*s+e,m=l=>n-l*p,i=this._getHydrationFunction(t,a,m);for(const{geometry:l}of o)h(l)&&i&&i(l);return this.transform=null,this}_quantizePoints(t,o,r){let e,n;const s=[];for(let p=0,a=t.length;p<a;p++){const m=t[p];if(p>0){const i=o(m[0]),l=r(m[1]);i===e&&l===n||(s.push([i-e,l-n]),e=i,n=l)}else e=o(m[0]),n=r(m[1]),s.push([e,n])}return s.length>0?s:null}_getQuantizationFunction(t,o,r){return t==="point"?e=>(e.x=o(e.x),e.y=r(e.y),e):t==="polyline"||t==="polygon"?e=>{const n=d(e)?e.rings:e.paths,s=[];for(let p=0,a=n.length;p<a;p++){const m=n[p],i=this._quantizePoints(m,o,r);i&&s.push(i)}return s.length>0?(d(e)?e.rings=s:e.paths=s,e):null}:t==="multipoint"?e=>{const n=this._quantizePoints(e.points,o,r);return n&&n.length>0?(e.points=n,e):null}:t==="extent"?e=>e:null}_getHydrationFunction(t,o,r){return t==="point"?e=>{e.x=o(e.x),e.y=r(e.y)}:t==="polyline"||t==="polygon"?e=>{const n=d(e)?e.rings:e.paths;let s,p;for(let a=0,m=n.length;a<m;a++){const i=n[a];for(let l=0,g=i.length;l<g;l++){const c=i[l];l>0?(s+=c[0],p+=c[1]):(s=c[0],p=c[1]),c[0]=o(s),c[1]=r(p)}}}:t==="extent"?e=>{e.xmin=o(e.xmin),e.ymin=r(e.ymin),e.xmax=o(e.xmax),e.ymax=r(e.ymax)}:t==="multipoint"?e=>{const n=e.points;let s,p;for(let a=0,m=n.length;a<m;a++){const i=n[a];a>0?(s+=i[0],p+=i[1]):(s=i[0],p=i[1]),i[0]=o(s),i[1]=r(p)}}:null}};f([u({type:String,json:{write:!0}})],y.prototype,"displayFieldName",void 0),f([u({type:Boolean,json:{write:{overridePolicy:t=>({enabled:t})}}})],y.prototype,"exceededTransferLimit",void 0),f([u({type:[T],json:{write:!0}})],y.prototype,"features",void 0),f([w("features")],y.prototype,"readFeatures",null),f([u({type:[$],json:{write:!0}})],y.prototype,"fields",void 0),f([u({type:["point","multipoint","polyline","polygon","extent","mesh"],json:{read:{reader:R.read}}})],y.prototype,"geometryType",void 0),f([G("geometryType")],y.prototype,"writeGeometryType",null),f([u({type:Boolean,json:{write:{overridePolicy:t=>({enabled:t})}}})],y.prototype,"hasM",void 0),f([u({type:Boolean,json:{write:{overridePolicy:t=>({enabled:t})}}})],y.prototype,"hasZ",void 0),f([u({types:F,json:{write:!0}})],y.prototype,"queryGeometry",void 0),f([w("queryGeometry")],y.prototype,"readQueryGeometry",null),f([u({type:x,json:{write:!0}})],y.prototype,"spatialReference",void 0),f([G("spatialReference")],y.prototype,"writeSpatialReference",null),f([u({json:{write:!0}})],y.prototype,"transform",void 0),y=v=f([j("esri.rest.support.FeatureSet")],y),y.prototype.toJSON.isDefaultToJSON=!0;const Se=y;export{Se as default};
