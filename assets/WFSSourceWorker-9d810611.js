import{j as l}from"./asyncUtils-b47bdec8.js";import{a as n,s as g}from"./Error-8814705f.js";import{r as _,e as f}from"./typedArrayUtil-bd69bba0.js";import{f as m,j as d}from"./promiseUtils-ec14a623.js";import{E as w,z as p}from"./Extent-d21a2637.js";import{n as E,r as q}from"./featureConversionUtils-e981d065.js";import{u as F}from"./FeatureStore-ab2b3e05.js";import{g as S,f as T}from"./projectionSupport-80e82945.js";import{Y as x}from"./QueryEngine-665831fc.js";import{T as j,I}from"./geojson-95f15e7c.js";import{m as b}from"./sourceUtils-40dd9bdf.js";import{K as C}from"./wfsUtils-17538467.js";import{r as P}from"./FieldsIndex-e1d877a8.js";import"./cast-4943406f.js";import"./string-cc430a78.js";import"./ensureType-9613b5f0.js";import"./nextTick-3ee5a785.js";import"./jsonUtils-7333a4d1.js";import"./Polyline-98ddf509.js";import"./OptimizedFeature-ec32193d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./Evented-28d49a6f.js";import"./aaBoundingBox-58fec4c8.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./aaBoundingRect-647e206b.js";import"./PooledRBush-153526b2.js";import"./quickselect-322ec8e1.js";import"./centroid-1300048c.js";import"./projection-462aeb9f.js";import"./preload-helper-6c8d3039.js";import"./unitUtils-bc71b997.js";import"./jsonMap-9318d50f.js";import"./SimpleObservable-b403cd38.js";import"./mat4-62d5e6a4.js";import"./assets-2905a8db.js";import"./request-9ab300ca.js";import"./zscale-3fafe111.js";import"./json-48e3ea08.js";import"./MemCache-786f3df9.js";import"./normalizeUtils-758f8b63.js";import"./geometry-da69b92c.js";import"./typeUtils-98cd71e2.js";import"./QueryEngineResult-c707f6fb.js";import"./utils-179e89a7.js";import"./generateRendererUtils-717e0562.js";import"./colorRamps-08b6e1ac.js";import"./Color-ebbea628.js";import"./colorUtils-639f4d25.js";import"./enumeration-1740c98c.js";import"./Symbol-f543a02b.js";import"./ItemCache-d0e0cdf0.js";import"./WhereClause-5f7b04b2.js";import"./utils-cc39e27f.js";import"./fieldUtils-605e1353.js";import"./arcadeOnDemand-5200ab6b.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-f0f8a5cd.js";import"./Scheduler-3e0d3f06.js";import"./reactiveUtils-3389689f.js";import"./xmlUtils-444cb4c0.js";import"./Field-27137e22.js";import"./fieldType-ff12d8db.js";class zt{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,i=await C(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await j(i),m(t);const s=I(i,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!w(this._queryEngine.spatialReference,p))for(const r of s)_(r.geometry)&&(r.geometry=E(S(q(r.geometry,this._queryEngine.geometryType,!1,!1),p,this._queryEngine.spatialReference)));let a=1;for(const r of s){const o={};b(this._fieldsIndex,o,r.attributes,!0),r.attributes=o,r.attributes[e]==null&&(r.objectId=r.attributes[e]=a++)}return s}}destroy(){var t;(t=this._queryEngine)==null||t.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:i,getFeatureOutputFormat:s,spatialReference:a,fields:r,geometryType:o,featureType:u,objectIdField:h,customParameters:y}=t;this._featureType=u,this._customParameters=y,this._getFeatureUrl=i,this._getFeatureOutputFormat=s,this._fieldsIndex=new P(r),await this._checkProjection(a),m(e),this._queryEngine=new x({fields:r,geometryType:o,hasM:!1,hasZ:!1,objectIdField:h,spatialReference:a,timeInfo:null,featureStore:new F({geometryType:o,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(f(e.signal));return this._queryEngine.featureStore.addMany(c),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new n("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){var e;return this._customParameters=t,(e=this._snapshotTask)==null||e.abort(),this._snapshotTask=l(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),i&&this._queryEngine.featureStore.addMany(i)},i=>{this._queryEngine.featureStore.clear(),d(i)||g.getLogger("esri.layers.WFSLayer").error(new n("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:i}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await T(p,t)}catch{throw new n("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{zt as default};
