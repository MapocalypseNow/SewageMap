import{D as l,F as n,b3 as p,b4 as y,v as m,eL as u}from"./vendor-128d427e.js";import d from"./FeatureLayerView2D-7ea41eef.js";import"./utils-36a4772c.js";import"./enums-4ca4641f.js";import"./MaterialKey-6cf4dcf9.js";import"./Utils-38ea1caf.js";import"./enums-8bf08d0c.js";import"./enums-64ab819c.js";import"./Texture-c00f40b4.js";import"./VertexElementDescriptor-2925c6af.js";import"./LayerView-3a687707.js";import"./schemaUtils-925625ef.js";import"./visualVariablesUtils-088bebaa.js";import"./createSymbolSchema-a1cfc110.js";import"./ExpandedCIM-5662eeb4.js";import"./BidiEngine-836b7ef6.js";import"./Rect-ea14f53a.js";import"./GeometryUtils-eebff0a0.js";import"./floatRGBA-0febf696.js";import"./rendererUtils-632eef8b.js";import"./util-2a9066df.js";import"./floorFilterUtils-080a7cd2.js";import"./popupUtils-98d4982c.js";import"./RefreshableLayerView-8b386efd.js";function b(e,r){return!e.visible||e.minScale!==0&&r>e.minScale||e.maxScale!==0&&r<e.maxScale}let o=class extends d{initialize(){this.handles.add([p(()=>{var e;return(e=this.view)==null?void 0:e.viewpoint},()=>this._update(),y)])}_injectOverrides(e){let r=super._injectOverrides(e);const s=this.view.scale,t=this.layer.sublayers.filter(a=>b(a,s)).map(a=>a.subtypeCode);if(!t.length)return r;r=m(r)?r:new u().toJSON();const i=`NOT ${this.layer.subtypeField} IN (${t.join(",")})`;return r.where=r.where?`(${r.where}) AND (${i})`:i,r}_setLayersForFeature(e){const r=this.layer.fieldsIndex.get(this.layer.subtypeField),s=e.attributes[r.name],t=this.layer.sublayers.find(i=>i.subtypeCode===s);e.layer=t,e.sourceLayer=this.layer}_createSchemaConfig(){const e={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(i=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:i.labelingInfo,labelsVisible:i.labelsVisible,renderer:i.renderer,subtypeCode:i.subtypeCode,orderBy:null}))},r=this.layer.sublayers.map(i=>i.subtypeCode).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${r})`:"1=2";let t=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return t+=s,{...super._createSchemaConfig(),...e,definitionExpression:t}}};o=l([n("esri.views.2d.layers.SubtypeGroupLayerView2D")],o);const G=o;export{G as default};
