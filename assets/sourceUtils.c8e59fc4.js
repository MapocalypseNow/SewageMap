import{i4 as p,i5 as y,i3 as w,gI as I,i6 as _,d5 as h,l as m,$ as b}from"./vendor.f8a4aecc.js";class v{constructor(){this.code=null,this.description=null}}class q{constructor(t){this.error=new v,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function f(e){return new q(e)}class P{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function F(e){return new P(e)}const a=new Set;function G(e,t,n,g=!1,u){var c;a.clear();for(const r in n){const i=e.get(r);if(!i)continue;const l=n[r],s=E(i,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:i,originalValue:l,sanitizedValue:s}}),a.add(i.name),i&&(g||i.editable)){const d=p(i,s);if(d)return f(y(d,i,s));t[i.name]=s}}for(const r of(c=e==null?void 0:e.requiredFields)!=null?c:[])if(!a.has(r.name))return f(`missing required field "${r.name}"`);return null}function E(e,t){let n=t;return typeof t=="string"&&w(e)?n=parseFloat(t):t!=null&&I(e)&&typeof t!="string"&&(n=String(t)),_(n)}let o;function S(e,t){if(!e||!h(t))return e;if("rings"in e||"paths"in e){if(m(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function V(){return m(o)&&(o=await b(()=>import("./geometryEngineJSON.bb598bac.js"),["assets/geometryEngineJSON.bb598bac.js","assets/geometryEngineBase.16e55e52.js","assets/geometryEngineJSON.a5e2e2d3.js","assets/json.5152e73f.js"])),o}async function T(e,t){!h(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await V()}export{f as a,F as f,S as g,G as m,T as w};
