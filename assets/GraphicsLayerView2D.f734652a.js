import{aR as p,E as a,aj as o,r as g,f as s,g as m,G as l}from"./vendor.f8a4aecc.js";import{f as c,u as n}from"./LayerView.caf62521.js";import{i as d}from"./GraphicContainer.ebb813e7.js";import{a as u}from"./BaseGraphicContainer.a6b12718.js";import"./Container.edf2e803.js";import"./definitions.1d569ae6.js";import"./enums.3c1fa5b5.js";import"./Texture.1db32977.js";import"./color.1638605e.js";import"./enums.9a5c29c3.js";import"./VertexElementDescriptor.5da9dfe9.js";import"./ExpandedCIM.4718187a.js";import"./BidiEngine.f5b8c89f.js";import"./GeometryUtils.6fd53e6d.js";import"./MaterialKey.04e0f9bd.js";import"./Rect.e8e4d18d.js";import"./floatRGBA.751864de.js";import"./normalizeUtilsSync.58e80e7c.js";import"./projectionSupport.258a3ed3.js";import"./json.5152e73f.js";import"./VertexArrayObject.e7a7b75d.js";import"./FeatureContainer.abc30b30.js";import"./TileContainer.65e93271.js";import"./WGLContainer.65e67344.js";import"./ProgramTemplate.6a189101.js";import"./utils.370c18a5.js";import"./StyleDefinition.dc47b5d4.js";import"./config.86ceb802.js";import"./GeometryUtils.ccd3b111.js";import"./earcut.a219bf29.js";import"./visualVariablesUtils.3cee809d.js";import"./visualVariablesUtils.fe2e172f.js";import"./Matcher.117df6ef.js";import"./tileUtils.dbdde791.js";import"./TurboLine.12a96cfa.js";import"./schemaUtils.a040cae2.js";import"./createSymbolSchema.11788a82.js";import"./util.05d7e1cf.js";import"./ComputedAttributeStorage.480bcf13.js";import"./ArcadeDate.026fbded.js";import"./executionError.c4c51b90.js";import"./arcadeTimeUtils.13859c15.js";import"./centroid.9e8a0f0b.js";import"./vec3f32.4d8dc001.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof a?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):o.isCollection(i)&&i.length>0&&(t=i.map(r=>r&&r.uid).toArray());const h=t==null?void 0:t.filter(g);return h!=null&&h.length?(this._addHighlight(h),{remove:()=>this._removeHighlight(h)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t);this._highlightIds.set(t,h+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t)-1;h===0?this._highlightIds.delete(t):this._highlightIds.set(t,h)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([m()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const ai=e;export{ai as default};
