import{eH as x,eI as w,eJ as I,ec as $,ed as O,ee as E,ef as T,eK as M,eL as L,eM as P,bG as N,a3 as R,cm as j,eN as b,eO as g,eP as J,U as f,$ as U,al as F,eQ as q,eR as A,r as v,be as k,a8 as a,a9 as n,eh as _,eS as z,ej as V,aa as B,w as G,eT as H}from"./vendor-445d19db.js";import{E as K,y as C,z as D}from"./SublayersOwner-6352be86.js";import{c as W}from"./ExportImageParameters-80ad2fcd.js";import{n as S}from"./sublayerUtils-113e7653.js";import"./Version-21893b77.js";import"./floorFilterUtils-080a7cd2.js";let s=class extends x(w(I(K(C($(O(E(T(M(L(P(N(G))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=R(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(j).then(()=>this._fetchService(r))),Promise.resolve(this)}readImageFormat(e,r){const p=r.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,p,t){if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let l=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const i=b(t.origin);if(i===g.PORTAL_ITEM){const h=this.createSublayersForOrigin("service").sublayers;l=S(o,h,g.SERVICE)}else if(i>g.PORTAL_ITEM){const h=this.createSublayersForOrigin("portal-item");l=S(o,h.sublayers,b(h.origin))}}const c=[],y={writeSublayerStructure:l,...t};let m=l;o.forEach(i=>{const h=i.write({},y);c.push(h),m=m||i.originOf("visible")==="user"}),c.some(i=>Object.keys(i).length>1)&&(r.layers=c),m&&(r.visibleLayers=o.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,r,p,t){const o=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const l=new W({layer:this,floors:t==null?void 0:t.floors,scale:J({extent:e,width:r})*o}),c=l.toJSON();l.destroy();const y=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},m=e&&e.spatialReference,i=m.wkid||JSON.stringify(m.toJSON());c.dpi*=o;const h={};if(t!=null&&t.timeExtent){const{start:u,end:d}=t.timeExtent.toJSON();h.time=u&&d&&u===d?""+u:`${u??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:i,imageSR:i,size:r+","+p,...c,...y,...h}}async fetchImage(e,r,p,t){return this._fetchImage("image",e,r,p,t)}async fetchImageBitmap(e,r,p,t){const o=await this._fetchImage("blob",e,r,p,t);return createImageBitmap(o)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await f(this.url,r),{extent:t,fullExtent:o,timeExtent:l}=p,c=t||o;return{fullExtent:c&&U.fromJSON(c),timeExtent:l&&F.fromJSON({start:l[0],end:l[1]})}}loadAll(){return q(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return A(this,e)}async _fetchImage(e,r,p,t,o){const l={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,p,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},c=this.parsedUrl.path+"/export";if(l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers)throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});try{const{data:y}=await f(c,l);return y}catch(y){throw k(y)?y:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${c}`,{error:y})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:p}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};a([n({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),a([n()],s.prototype,"dpi",void 0),a([n()],s.prototype,"gdbVersion",void 0),a([n()],s.prototype,"imageFormat",void 0),a([_("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),a([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),a([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),a([n()],s.prototype,"imageTransparency",void 0),a([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),a([n({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),a([n({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),a([n({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),a([n()],s.prototype,"sourceJSON",void 0),a([n({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),a([z("sublayers",{layers:{type:[D]},visibleLayers:{type:[H]}})],s.prototype,"writeSublayers",null),a([n({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),a([n({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),a([n(V)],s.prototype,"url",void 0),s=a([B("esri.layers.MapImageLayer")],s);const re=s;export{re as default};
