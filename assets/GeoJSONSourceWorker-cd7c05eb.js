import{gc as g,d6 as q,s as _,hR as O,g9 as k,fI as C,hS as D,ga as Q,aZ as G,a2 as Z,G as M,cB as P,M as E,cG as A,d0 as v,U as N,b2 as x,cZ as z,c$ as B,hT as U}from"./vendor-8855e047.js";import{u as L}from"./FeatureStore-8f4d7011.js";import{f as F,g as b}from"./projectionSupport-e3191e9a.js";import{Y as J}from"./QueryEngine-cfed60ec.js";import{L as V,I as W,T as Y}from"./geojson-5d672992.js";import{w as H,m as w,f as T,a as I,g as S}from"./sourceUtils-5bf6bf20.js";import"./PooledRBush-72be9550.js";import"./centroid-19b48edf.js";import"./json-48e3ea08.js";import"./QueryEngineResult-fed0cf5d.js";import"./WhereClause-b5dbe378.js";import"./utils-22c67127.js";import"./timeSupport-712a52a0.js";const X={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class he{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const i=[];await this._checkProjection(e.spatialReference);let n=null;e.url&&(n=await this._fetch(t==null?void 0:t.signal));const r=V(n,{geometryType:e.geometryType}),o=e.fields||r.fields||[],u=e.hasZ!=null?e.hasZ:r.hasZ,d=r.geometryType;let c=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const y=e.spatialReference||g;let s=e.timeInfo;o===r.fields&&r.unknownFields.length>0&&i.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});let l=new q(o).get(c);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1,c=l.name):(l={alias:c,name:c,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(l));const h={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!O.jsonValues.includes(a.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==l.name){const f=k(a);f!==void 0&&(h[a.name]=f)}}this._fieldsIndex=new q(o);const p=this._fieldsIndex.requiredFields.indexOf(l);if(p>-1&&this._fieldsIndex.requiredFields.splice(p,1),s){if(s.startTimeField){const a=this._fieldsIndex.get(s.startTimeField);a?(s.startTimeField=a.name,a.type="esriFieldTypeDate"):s.startTimeField=null}if(s.endTimeField){const a=this._fieldsIndex.get(s.endTimeField);a?(s.endTimeField=a.name,a.type="esriFieldTypeDate"):s.endTimeField=null}if(s.trackIdField){const a=this._fieldsIndex.get(s.trackIdField);a?s.trackIdField=a.name:(s.trackIdField=null,i.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:s}}))}s.startTimeField||s.endTimeField||(i.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:s}}),s=null)}const R=d?C(d):null,m={warnings:i,featureErrors:[],layerDefinition:{...X,drawingInfo:R,templates:D(h),extent:null,geometryType:d,objectIdField:c,fields:o,hasZ:!!u,timeInfo:s}};this._queryEngine=new J({fields:o,geometryType:d,hasM:!1,hasZ:u,objectIdField:c,spatialReference:y,timeInfo:s,featureStore:new L({geometryType:d,hasM:!1,hasZ:u}),cacheSpatialQueries:!0}),this._createDefaultAttributes=Q(h,c);const j=await this._createFeatures(n);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,j);const $=this._normalizeFeatures(j,m.warnings,m.featureErrors);if(this._queryEngine.featureStore.addMany($),m.layerDefinition.extent=this._queryEngine.fullExtent,m.layerDefinition.timeInfo){const{start:a,end:f}=this._queryEngine.timeExtent;m.layerDefinition.timeInfo.timeExtent=[a,f]}return m}async applyEdits(e){const{spatialReference:t,geometryType:i}=this._queryEngine;return await Promise.all([H(t,i),F(e.adds,t),F(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this._loadOptions.customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=G(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,i);const n=this._normalizeFeatures(i);n&&this._queryEngine.featureStore.addMany(n)},i=>{this._queryEngine.featureStore.clear(),Z(i)||M.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:i}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent}}async _createFeatures(e){const{geometryType:t,hasZ:i,objectIdField:n}=this._queryEngine,r=W(e,{geometryType:t,hasZ:i,objectIdField:n});if(!P(this._queryEngine.spatialReference,g))for(const o of r)E(o.geometry)&&(o.geometry=A(b(v(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),g,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:i}=this._loadOptions,n=(await N(t,{responseType:"json",query:{...i},signal:e})).data;return await Y(n),n}_normalizeFeatures(e,t,i){const{objectIdField:n}=this._queryEngine,r=[];for(const o of e){const u=this._createDefaultAttributes(),d=w(this._fieldsIndex,u,o.attributes,!0,t);d?i==null||i.push(d):(this._assignObjectId(u,o.attributes,!0),o.attributes=u,o.objectId=u[n],r.push(o))}return r}_applyEdits(e){const{adds:t,updates:i,deletes:n}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(r,t),i&&i.length&&this._applyUpdateEdits(r,i),n&&n.length){for(const o of n)r.deleteResults.push(T(o));this._queryEngine.featureStore.removeManyById(n)}return{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:i}=e,{geometryType:n,hasM:r,hasZ:o,objectIdField:u,spatialReference:d,featureStore:c}=this._queryEngine,y=[];for(const s of t){if(s.geometry&&n!==x(s.geometry)){i.push(I("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),h=w(this._fieldsIndex,l,s.attributes);if(h)i.push(h);else{if(this._assignObjectId(l,s.attributes),s.attributes=l,s.uid!=null){const p=s.attributes[u];e.uidToObjectId[s.uid]=p}if(E(s.geometry)){const p=s.geometry.spatialReference??d;s.geometry=b(S(s.geometry,p),p,d)}y.push(s),i.push(T(s.attributes[u]))}}c.addMany(z([],y,n,o,r,u))}_applyUpdateEdits({updateResults:e},t){const{geometryType:i,hasM:n,hasZ:r,objectIdField:o,spatialReference:u,featureStore:d}=this._queryEngine;for(const c of t){const{attributes:y,geometry:s}=c,l=y&&y[o];if(l==null){e.push(I(`Identifier field ${o} missing`));continue}if(!d.has(l)){e.push(I(`Feature with object id ${l} missing`));continue}const h=B(d.getFeature(l),i,r,n);if(E(s)){if(i!==x(s)){e.push(I("Incorrect geometry type."));continue}const p=s.spatialReference??u;h.geometry=b(S(s,p),p,u)}if(y){const p=w(this._fieldsIndex,h.attributes,y);if(p){e.push(p);continue}}d.add(U(h,i,r,n,o)),e.push(T(l))}}_createObjectIdGenerator(e,t){const i=e.fieldsIndex.get(e.objectIdField);if(i.type==="esriFieldTypeString")return()=>i.name+"-"+Date.now().toString(16);let n=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(n=Math.max(n,r.objectId));return n=Math.max(0,n)+1,()=>n++}_assignObjectId(e,t,i=!1){const n=this._queryEngine.objectIdField;e[n]=i&&n in t?t[n]:this._objectIdGenerator()}async _checkProjection(e){try{await F(g,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{he as default};
