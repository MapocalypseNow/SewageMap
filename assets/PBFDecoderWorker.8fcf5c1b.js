import{eV as d,bh as c,hk as p,L as f,k as y,e4 as _,cZ as m,cT as g,hl as P,hm as C,hn as b}from"./index.2901469c.js";class G{constructor(e,t,s){this.uid=e,this.geometry=t,this.attributes=s,this.visible=!0,this.objectId=null,this.centroid=null}}class T{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}d();c();function v(i,e){return e}function h(i,e,t,s){switch(t){case 0:return a(i,e+s,0);case 1:return i.originPosition==="lowerLeft"?a(i,e+s,1):k(i,e+s,1)}}function u(i,e,t,s){return t===2?a(i,e,2):h(i,e,t,s)}function M(i,e,t,s){return t===2?a(i,e,3):h(i,e,t,s)}function R(i,e,t,s){return t===3?a(i,e,3):u(i,e,t,s)}function a({translate:i,scale:e},t,s){return i[s]+t*e[s]}function k({translate:i,scale:e},t,s){return i[s]-t*e[s]}class x{constructor(e){this._options=e,this.geometryTypes=["point","multipoint","polyline","polygon"],this._previousCoordinate=[0,0],this._transform=null,this._applyTransform=v,this._lengths=[],this._currentLengthIndex=0,this._toAddInCurrentPath=0,this._vertexDimension=0,this._coordinateBuffer=null,this._coordinateBufferPtr=0,this._attributesConstructor=class{}}createFeatureResult(){return new T}finishFeatureResult(e){if(this._options.applyTransform&&(e.transform=null),this._attributesConstructor=class{},this._coordinateBuffer=null,this._lengths.length=0,!e.hasZ)return;const t=p(e.geometryType,this._options.sourceSpatialReference,e.spatialReference);if(!f(t))for(const s of e.features)t(s.geometry)}createSpatialReference(){return new y}addField(e,t){e.fields.push(_.fromJSON(t));const s=e.fields.map(r=>r.name);this._attributesConstructor=function(){for(const r of s)this[r]=null}}addFeature(e,t){const s=this._options.maxStringAttributeLength?this._options.maxStringAttributeLength:0;if(s>0)for(const r in t.attributes){const o=t.attributes[r];typeof o=="string"&&o.length>s&&(t.attributes[r]="")}e.features.push(t)}addQueryGeometry(e,t){const{queryGeometry:s,queryGeometryType:r}=t,o=m(s.clone(),s,!1,!1,this._transform),l=g(o,r,!1,!1);let n=null;switch(r){case"esriGeometryPoint":n="point";break;case"esriGeometryPolygon":n="polygon";break;case"esriGeometryPolyline":n="polyline";break;case"esriGeometryMultipoint":n="multipoint"}l.type=n,e.queryGeometryType=r,e.queryGeometry=l}prepareFeatures(e){switch(this._transform=e.transform,this._options.applyTransform&&e.transform&&(this._applyTransform=this._deriveApplyTransform(e)),this._vertexDimension=2,e.hasZ&&this._vertexDimension++,e.hasM&&this._vertexDimension++,e.geometryType){case"point":this.addCoordinate=(t,s,r)=>this.addCoordinatePoint(t,s,r),this.createGeometry=t=>this.createPointGeometry(t);break;case"polygon":this.addCoordinate=(t,s,r)=>this._addCoordinatePolygon(t,s,r),this.createGeometry=t=>this._createPolygonGeometry(t);break;case"polyline":this.addCoordinate=(t,s,r)=>this._addCoordinatePolyline(t,s,r),this.createGeometry=t=>this._createPolylineGeometry(t);break;case"multipoint":this.addCoordinate=(t,s,r)=>this._addCoordinateMultipoint(t,s,r),this.createGeometry=t=>this._createMultipointGeometry(t);break;case"mesh":case"extent":break;default:P(e.geometryType)}}createFeature(){return this._lengths.length=0,this._currentLengthIndex=0,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0,new G(C(),null,new this._attributesConstructor)}allocateCoordinates(){const e=this._lengths.reduce((t,s)=>t+s,0);this._coordinateBuffer=new Float64Array(e*this._vertexDimension),this._coordinateBufferPtr=0}addLength(e,t,s){this._lengths.length===0&&(this._toAddInCurrentPath=t),this._lengths.push(t)}createPointGeometry(e){const t={type:"point",x:0,y:0,spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM};return t.hasZ&&(t.z=0),t.hasM&&(t.m=0),t}addCoordinatePoint(e,t,s){switch(t=this._applyTransform(this._transform,t,s,0),s){case 0:e.x=t;break;case 1:e.y=t;break;case 2:e.hasZ?e.z=t:e.m=t;break;case 3:e.m=t}}_transformPathLikeValue(e,t){let s=0;return t<=1&&(s=this._previousCoordinate[t],this._previousCoordinate[t]+=e),this._applyTransform(this._transform,e,t,s)}_addCoordinatePolyline(e,t,s){this._dehydratedAddPointsCoordinate(e.paths,t,s)}_addCoordinatePolygon(e,t,s){this._dehydratedAddPointsCoordinate(e.rings,t,s)}_addCoordinateMultipoint(e,t,s){s===0&&e.points.push([]);const r=this._transformPathLikeValue(t,s);e.points[e.points.length-1].push(r)}_createPolygonGeometry(e){return{type:"polygon",rings:[[]],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_createPolylineGeometry(e){return{type:"polyline",paths:[[]],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_createMultipointGeometry(e){return{type:"multipoint",points:[],spatialReference:e.spatialReference,hasZ:!!e.hasZ,hasM:!!e.hasM}}_dehydratedAddPointsCoordinate(e,t,s){s===0&&this._toAddInCurrentPath--==0&&(e.push([]),this._toAddInCurrentPath=this._lengths[++this._currentLengthIndex]-1,this._previousCoordinate[0]=0,this._previousCoordinate[1]=0);const r=this._transformPathLikeValue(t,s),o=e[e.length-1];s===0&&o.push(new Float64Array(this._coordinateBuffer.buffer,this._coordinateBufferPtr*Float64Array.BYTES_PER_ELEMENT,this._vertexDimension)),this._coordinateBuffer[this._coordinateBufferPtr++]=r}_deriveApplyTransform(e){const{hasZ:t,hasM:s}=e;return t&&s?R:t?u:s?M:h}}class Z{_parseFeatureQuery(e){const t=b(e.buffer,new x(e.options)),s={...t,spatialReference:t.spatialReference.toJSON(),fields:t.fields?t.fields.map(r=>r.toJSON()):void 0};return Promise.resolve(s)}}function w(){return new Z}export{w as default};
