import{a3 as o,ao as f,o as w,aH as p,bA as n,a as y,I as _,a8 as V,aa as v}from"./vendor-445d19db.js";import{i as C}from"./utils-6396d15b.js";import{r as b}from"./GroupContainer-c17df54c.js";import{y as H,u as I}from"./LayerView-2f4bfb36.js";import{i as g}from"./GraphicContainer-67acf6f1.js";import{o as m}from"./BaseGraphicContainer-dd7f4c14.js";import"./enums-4ca4641f.js";import"./MaterialKey-5504317a.js";import"./Utils-cdacad72.js";import"./enums-8bf08d0c.js";import"./enums-64ab819c.js";import"./Texture-a2352f23.js";import"./VertexElementDescriptor-2925c6af.js";import"./WGLContainer-7f535211.js";import"./pixelUtils-9c524314.js";import"./VertexArrayObject-2a5c5453.js";import"./ProgramTemplate-c51bbb20.js";import"./StyleDefinition-3c6a4c69.js";import"./config-1337d16e.js";import"./GeometryUtils-c093d234.js";import"./earcut-58237617.js";import"./ExpandedCIM-1bd63987.js";import"./BidiEngine-836b7ef6.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-ad21a9c2.js";import"./GeometryUtils-eebff0a0.js";import"./floatRGBA-02bd94bd.js";import"./normalizeUtilsSync-f52aa61a.js";import"./projectionSupport-43081d3f.js";import"./json-48e3ea08.js";import"./FeatureContainer-79c7bb83.js";import"./TileContainer-9841958d.js";import"./visualVariablesUtils-bd2b2199.js";import"./visualVariablesUtils-e0bd40c0.js";import"./Matcher-9357b4ea.js";import"./tileUtils-135b0f25.js";import"./TileClipper-98c28085.js";import"./Geometry-daada628.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-c8c76855.js";import"./createSymbolSchema-15243994.js";import"./rendererUtils-d69d5f00.js";import"./util-40ea0c97.js";import"./ComputedAttributeStorage-90a9463c.js";import"./FeatureSetReader-350c4cce.js";import"./centroid-3355b51b.js";import"./vec3f32-4322908d.js";const d="sublayers",l="layerView",T=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends H(I){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new b}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){o(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():o(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const r=e.hitTest(i);if(o(this._graphicsViewsFeatureCollectionMap)){const a=this._graphicsViewsFeatureCollectionMap.get(e);for(const s of r)!s.popupTemplate&&a.popupTemplate&&(s.popupTemplate=a.popupTemplate),s.sourceLayer=s.layer=this.layer}return r}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof f?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):w.isCollection(i)&&(t=i.map(e=>e&&e.uid).toArray()),t=t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>{this._removeHighlight(t)}}):T}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(o(e)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of e){const a=new g(this.view.featuresTilingScheme),s=new m({view:i,graphics:r.source,renderer:r.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(s,r),this.container.addChild(s.container),this.handles.add([p(()=>r.visible,h=>s.container.visible=h,n),p(()=>s.updating,()=>this.notifyChange("updating"),n)],l)}this._updateHighlight()}else o(this.layer.sublayers)&&this.handles.add(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),_(this.layer.sublayers))return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new C,s=new g(this.view.featuresTilingScheme);s.fadeTransitionEnabled=!0;const h=new m({view:t,graphics:r.graphics,requestUpdateCallback:e,container:s});this.handles.add([r.on("graphic-update",h.graphicUpdateHandler),p(()=>r.visible,u=>h.container.visible=u,n),p(()=>h.updating,()=>this.notifyChange("updating"),n)],l),a.addChild(h.container),this.container.addChild(a),i.push(h)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};c=V([v("esri.views.2d.layers.MapNotesLayerView2D")],c);const Vi=c;export{Vi as default};
