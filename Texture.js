import{O as k,i as $,s as z,a9 as w,r as x,k as b,ag as y,n as K}from"./index.js";import{M as T,L as E,D as P,t as O,G as v,P as D,U as R,u as H}from"./enums.js";const Y=k.getLogger("esri.views.webgl.checkWebGLError");function q(e,t){switch(t){case e.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case e.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case e.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case e.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case e.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case e.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}const X=!!$("enable-feature:webgl-debug");function Z(){return X}function re(){return X}function I(e){if(Z()){const t=e.getError();if(t){const i=q(e,t),r=new Error().stack;Y.error(new z("webgl-error","WebGL error occured",{message:i,stack:r}))}}}const N={target:T.TEXTURE_2D,samplingMode:E.LINEAR,wrapMode:P.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1},F=4;let _=class{constructor(e,t,i=null){this._context=e,this.type="texture",this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,e.instanceCounter.increment(O.Texture,this),this._descriptor={...N,...t};for(const r in N)this._descriptor[r]===void 0&&(this._descriptor[r]=N[r]);if(e.type!==w.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),M(this._descriptor.target)))throw new Error("3D and array textures are not supported in WebGL1");this._descriptor.target===T.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._context.gl&&this._glName&&(this._context.unbindTexture(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(O.Texture,this))}release(){this.dispose()}resize(e,t){const i=this._descriptor;if(i.width!==e||i.height!==t){if(this._wasImmutablyAllocated)throw new Error("Immutable textures can't be resized!");i.width=e,i.height=t,this._descriptor.target===T.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(e=null){for(let t=T.TEXTURE_CUBE_MAP_POSITIVE_X;t<=T.TEXTURE_CUBE_MAP_NEGATIVE_Z;t++)this._setData(e,t)}setData(e){this._setData(e)}_setData(e,t){var h,c;if(!this._context||!this._context.gl)return;const i=this._context.gl;this._glName||(this._glName=i.createTexture()),e===void 0&&(e=null);const r=this._descriptor,s=t!=null?t:r.target,a=M(s);e===null&&(r.width=r.width||F,r.height=r.height||F,a&&(r.depth=(h=r.depth)!=null?h:1));const l=this._context.bindTexture(this,_.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(_.TEXTURE_UNIT_FOR_UPDATES),_._validateTexture(this._context,r),this._configurePixelStorage(),I(i);const n=r.pixelFormat;let o=(c=r.internalFormat)!=null?c:this._deriveInternalFormat(n,r.dataType);if(S(e)){let u=e.width,d=e.height;const p=1;e instanceof HTMLVideoElement&&(u=e.videoWidth,d=e.videoHeight),r.width&&r.height,a&&r.depth,r.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(s,o,r.hasMipmap,u,d,p),this._texImage(s,0,o,u,d,p,e),I(i),r.hasMipmap&&this.generateMipmap(),r.width===void 0&&(r.width=u),r.height===void 0&&(r.height=d),a&&r.depth===void 0&&(r.depth=p)}else{const{width:u,height:d,depth:p}=r;if(u==null||d==null)throw new Error("Width and height must be specified!");if(a&&p==null)throw new Error("Depth must be specified!");if(r.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(s,o,r.hasMipmap,u,d,p),i.DEPTH24_STENCIL8&&o===i.DEPTH_STENCIL&&(o=i.DEPTH24_STENCIL8),U(e)){const m=e.levels,g=G(s,u,d,p),f=Math.min(g-1,m.length-1);x(this._context.gl2)?i.texParameteri(r.target,this._context.gl2.TEXTURE_MAX_LEVEL,f):r.hasMipmap=r.hasMipmap&&g===m.length;const A=o;if(!J(A))throw new Error("Attempting to use compressed data with an umcompressed format!");this._forEachMipmapLevel((L,W,C,B)=>{const V=m[Math.min(L,m.length-1)];this._compressedTexImage(s,L,A,W,C,B,V)},f)}else x(e)?(this._texImage(s,0,o,u,d,p,e),I(i),r.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel((m,g,f,A)=>{this._texImage(s,m,o,g,f,A,null),I(i)})}_._applySamplingMode(i,this._descriptor),_._applyWrapMode(i,this._descriptor),_._applyAnisotropicFilteringParameters(this._context,this._descriptor),I(i),this._context.bindTexture(l,_.TEXTURE_UNIT_FOR_UPDATES)}updateData(e,t,i,r,s,a,l=0){var g;a||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const n=this._context.gl,o=this._descriptor,{pixelFormat:h,dataType:c,target:u,isImmutable:d}=o,p=(g=o.internalFormat)!=null?g:this._deriveInternalFormat(h,c);if(d&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");const m=this._context.bindTexture(this,_.TEXTURE_UNIT_FOR_UPDATES,!0);if((t<0||i<0||r>o.width||s>o.height||t+r>o.width||i+s>o.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),l){if(b(this._context.gl2))return void console.error("Webgl2 must be enabled to use dataRowOffset!");n.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS,l)}if(S(a)?x(this._context.gl2)?this._context.gl2.texSubImage2D(u,e,t,i,r,s,h,c,a):n.texSubImage2D(u,e,t,i,h,c,a):U(a)?n.compressedTexSubImage2D(u,e,t,i,r,s,p,a.levels[e]):n.texSubImage2D(u,e,t,i,r,s,h,c,a),l){if(b(this._context.gl2))return void console.error("Webgl2 must be enabled to use dataRowOffset!");n.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS,0)}this._context.bindTexture(m,_.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(e,t,i,r,s,a,l,n){var f;n||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const o=this._context.gl2;if(b(o))throw new Error("3D textures are not supported in WebGL1");const h=this._descriptor,{pixelFormat:c,dataType:u,isImmutable:d,target:p}=h,m=(f=h.internalFormat)!=null?f:this._deriveInternalFormat(c,u);if(d&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");M(p)||console.warn("Attempting to set 3D texture data on a non-3D texture");const g=this._context.bindTexture(this,_.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(_.TEXTURE_UNIT_FOR_UPDATES),(t<0||i<0||r<0||s>h.width||a>h.height||l>h.depth||t+s>h.width||i+a>h.height||r+l>h.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),U(n))n=n.levels[e],o.compressedTexSubImage3D(p,e,t,i,r,s,a,l,m,n);else{const A=n;o.texSubImage3D(p,e,t,i,r,s,a,l,c,u,A)}this._context.bindTexture(g,_.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const e=this._descriptor;if(!e.hasMipmap){if(this._wasImmutablyAllocated)throw new Error("Cannot add mipmaps to immutable texture after allocation");e.hasMipmap=!0,this._samplingModeDirty=!0,_._validateTexture(this._context,e)}e.samplingMode===E.LINEAR?(this._samplingModeDirty=!0,e.samplingMode=E.LINEAR_MIPMAP_NEAREST):e.samplingMode===E.NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=E.NEAREST_MIPMAP_NEAREST);const t=this._context.bindTexture(this,_.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(_.TEXTURE_UNIT_FOR_UPDATES),this._context.gl.generateMipmap(e.target),this._context.bindTexture(t,_.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,_._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const e=this._context.gl,t=this._descriptor;this._samplingModeDirty&&(_._applySamplingMode(e,t),this._samplingModeDirty=!1),this._wrapModeDirty&&(_._applyWrapMode(e,t),this._wrapModeDirty=!1)}_deriveInternalFormat(e,t){if(this._context.type===w.WEBGL1)return e;switch(t){case v.FLOAT:switch(e){case D.RGBA:return R.RGBA32F;case D.RGB:return R.RGB32F;default:throw new Error("Unable to derive format")}case v.UNSIGNED_BYTE:switch(e){case D.RGBA:return R.RGBA8;case D.RGB:return R.RGB8}default:return e}}_configurePixelStorage(){const e=this._context.gl,{unpackAlignment:t,flipped:i,preMultiplyAlpha:r}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)}_texStorage(e,t,i,r,s,a){const l=this._context.gl2;if(b(l))throw new Error("Immutable textures are not supported in WebGL1");if(!j(t))throw new Error("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const n=i?G(e,r,s,a):1;if(M(e)){if(a==null)throw new Error("Missing depth dimension for 3D texture upload");l.texStorage3D(e,n,t,r,s,a)}else l.texStorage2D(e,n,t,r,s);this._wasImmutablyAllocated=!0}_texImage(e,t,i,r,s,a,l){const n=this._context.gl;let o=null;const h=this._context.type===w.WEBGL2,c=M(e),{isImmutable:u,pixelFormat:d,dataType:p}=this._descriptor;if(h&&(o=n),h||!S(l))if(u){if(x(l)){const m=l;if(c){if(a==null)throw new Error("Missing depth dimension for 3D texture upload");o.texSubImage3D(e,t,0,0,0,r,s,a,d,p,m)}else n.texSubImage2D(e,t,0,0,r,s,d,p,m)}}else{const m=K(l);if(c){if(a==null)throw new Error("Missing depth dimension for 3D texture upload");o.texImage3D(e,t,i,r,s,a,0,d,p,m)}else n.texImage2D(e,t,i,r,s,0,d,p,m)}else n.texImage2D(e,0,i,d,p,l)}_compressedTexImage(e,t,i,r,s,a,l){const n=this._context.gl;let o=null;const h=M(e),c=this._descriptor.isImmutable;if(h){if(this._context.type!==w.WEBGL2)throw new Error("3D textures are not supported in WebGL1");o=n}if(c){if(x(l))if(h){if(a==null)throw new Error("Missing depth dimension for 3D texture upload");o.compressedTexSubImage3D(e,t,0,0,0,r,s,a,i,l)}else n.compressedTexSubImage2D(e,t,0,0,r,s,i,l)}else if(h){if(a==null)throw new Error("Missing depth dimension for 3D texture upload");o.compressedTexImage3D(e,t,i,r,s,a,0,l)}else n.compressedTexImage2D(e,t,i,r,s,0,l)}_forEachMipmapLevel(e,t=1/0){let{width:i,height:r,depth:s,hasMipmap:a,target:l}=this._descriptor;const n=l===T.TEXTURE_3D;if(i==null||r==null||n&&s==null)throw new Error("Missing texture dimensions for mipmap calculation");for(let o=0;e(o,i,r,s),a&&(i!==1||r!==1||n&&s!==1)&&!(o>=t);++o)i=Math.max(1,i>>1),r=Math.max(1,r>>1),n&&(s=Math.max(1,s>>1))}static _validateTexture(e,t){(t.width!=null&&t.width<0||t.height!=null&&t.height<0||t.depth!=null&&t.depth<0)&&console.error("Negative dimension parameters are not allowed!");const i=e.type===w.WEBGL2,r=t.width!=null&&y(t.width)&&t.height!=null&&y(t.height);i||!t.isImmutable&&!M(t.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),i||r||(typeof t.wrapMode=="number"?t.wrapMode!==P.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):t.wrapMode.s===P.CLAMP_TO_EDGE&&t.wrapMode.t===P.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),t.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))}static _applySamplingMode(e,t){let i=t.samplingMode,r=t.samplingMode;i===E.LINEAR_MIPMAP_NEAREST||i===E.LINEAR_MIPMAP_LINEAR?(i=E.LINEAR,t.hasMipmap||(r=E.LINEAR)):i!==E.NEAREST_MIPMAP_NEAREST&&i!==E.NEAREST_MIPMAP_LINEAR||(i=E.NEAREST,t.hasMipmap||(r=E.NEAREST)),e.texParameteri(t.target,e.TEXTURE_MAG_FILTER,i),e.texParameteri(t.target,e.TEXTURE_MIN_FILTER,r)}static _applyWrapMode(e,t){typeof t.wrapMode=="number"?(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode)):(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode.s),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode.t))}static _applyAnisotropicFilteringParameters(e,t){var r;const i=e.capabilities.textureFilterAnisotropic;!i||e.gl.texParameterf(t.target,i.TEXTURE_MAX_ANISOTROPY,(r=t.maxAnisotropy)!=null?r:1)}};function j(e){return e in R}function J(e){return e in H}function U(e){return x(e)&&"type"in e&&e.type==="compressed"}function Q(e){return x(e)&&"byteLength"in e}function S(e){return x(e)&&!U(e)&&!Q(e)}function M(e){return e===T.TEXTURE_3D||e===T.TEXTURE_2D_ARRAY}function G(e,t,i,r=1){let s=Math.max(t,i);return e===T.TEXTURE_3D&&(s=Math.max(s,r)),Math.round(Math.log(s)/Math.LN2)+1}_.TEXTURE_UNIT_FOR_UPDATES=0;export{_ as E,Z as a,re as c,I as u};
